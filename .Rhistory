created_plist <- ArrivalProbability(created, 10, 240)
plot(created_plist, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
created_plist <- ArrivalProbability(created, 10, 20)
plot(created_plist, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
barplot(c(sum((as.integer(diff(created))) < 60),
sum((as.integer(diff(created))) < 30),
sum((as.integer(diff(created))) < 10)),
names.arg = c('60s', '30s', '10s'),
ylim = c(0, 500),
ylab = 'Count'
)
grid()
created_plist <- ArrivalProbability(created, 10, 60)
plot(created_plist, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
created_plist
incr = 10
maxi = 60
created_plist <- ArrivalProbability(created, incr, maxi)
plot(created_plist ~ length(created_plist) * incr, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
length(created_plist)
1:length(created_plist)
incr = 10
maxi = 60
created_plist <- ArrivalProbability(created, incr, maxi)
plot(created_plist ~ (1:length(created_plist) * incr), col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
length_plist <- 1:length(created_plist) * incr
length_plist
incr = 10
maxi = 60
created_plist <- ArrivalProbability(created, incr, maxi)
length_plist <- 1:length(created_plist) * incr
plot(created_plist ~ length_plist, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
incr = 10
maxi = 70
created_plist <- ArrivalProbability(created, incr, maxi)
length_plist <- 1:length(created_plist) * incr
plot(created_plist ~ length_plist, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
incr = 10
maxi = 70
created_plist <- ArrivalProbability(created, incr, maxi)
length_plist <- 1:length(created_plist) * incr
plot_1 <- plot(created_plist ~ length_plist, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
plot_1
incr = 10
maxi = 70
created_plist <- ArrivalProbability(created, incr, maxi)
length_plist <- 1:length(created_plist) * incr
plot_1 <- plot(created_plist ~ length_plist, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
incr = 10
maxi = 70
created_plist <- ArrivalProbability(created, incr, maxi)
length_plist <- 1:length(created_plist) * incr
plot(created_plist ~ length_plist, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
grid()
incr = 10
maxi = 120
created_plist <- ArrivalProbability(created, incr, maxi)
length_plist <- 1:length(created_plist) * incr
plot(created_plist ~ length_plist, col = 'red3', ylab = 'Probability', xlab = 'Time (in seconds)')
grid()
install.packages("ggedit")
library(ggedit)
library(ggplot2)
p <- ggplot(mtcars, aes(x = hp, y = wt)) +
geom_point() + geom_smooth()
p
p2 <- ggedit(p)
p2
p <- ggplot(mtcars, aes(x = hp, y = wt)) +
geom_point() + geom_smooth(linetype=2,size=3,colour='#4876FF')
p
names(p2) # will show you which objects are available.
plot(p2) # shows the updated plot (it is available in the first element of p2)
p2 <- ggedit(p)
install.packages("ctv")
library("ctv")
install.views(Econometrics)
install.views("Econometrics"")
```
)
))
kjlnkjl
s
fs
df
sdaf""
install.views("Econometrics")
?ctv
??ctv
library(ctv)
ctv::read.ctv
read.ctv
?read.ctv
library(Econometrics)
install.views("Econometrics")
install.packages("maptools")
exit
quit()
install.packages("relaimpo")
install.packages("OpenStreetMap")
quit()
knitr::opts_chunk$set(echo=TRUE, eval=TRUE, results='markup', warning=FALSE, error=FALSE, message=FALSE)
setwd('/home/ugo/Documents/Rprojects/Spatial Statistics/')
# p.176 MESS spatial lag spec
library(gdata)
mexico <- read.xls("spatial.xlsx", sheet = 'mexico', header = TRUE)
str(mexico)
head(mexico, 3)
library(spdep)
library(maptools)
# read the files, without the extension shp, shx and dbf
Mexico <- readShapePoly("Mexico_shapefiles/MEX_adm1", IDvar = "NAME_1")
# list the variable in the dataset
names(Mexico)
head(Mexico@data)
sapply(slot(Mexico, "polygons"),
function(i) slot(i, "ID")
)
knitr::opts_chunk$set(echo = TRUE)
a = 3
b = 1
a + b
a = 3
b = 1
a + b
def abc(a,b):
a * b = c
return c
a = 3
b = 1
a + b
def abc(a,b):
a * b = c
return c
def abc(a,b):
c = a * b
return c
data = foobar_api.get(1000)
file_loc = open("~/data/filename.csv", "w")
file_loc(data)
file_loc.close()
def aaa(x):
a ^ 2
def aaa(x):
a ** 2
import random
print random.random()
import random
print(random.random())
import random
print(random.random())
install.packages("PythonInR")
library(PythoninR)
install.packages("PythonInR")
python.path = '/home/ugo/anaconda3'
Sys.setenv(PATH = paste(python.path, Sys.getenv("PATH"), sep=";"))
import random
print(random.random())
import random
print(random())
install.packages("feather")
knitr::opts_chunk$set(echo = TRUE)
x = 'hello, python world!'
print(x.split(' '))
x = 'hello, python world!'
print(x.split(' '))
import sys
print sys.version
import sys
print sys.version
```{python, engine.path="/users/me/anaconda/bin/python3"}
import sys
print sys.version
```
install.packages('mclust')
install.packages('kernlab')
install.packages('dendextend')
install.packages('dendextend')
exit
exit()
quit()
install.packages('ggthemes')
install.packages('rattle')
install.packages('rattle')
quit()
install.packages('rattle')
install.packages('RGtk2')
install.packages('RGtk2')
install.packages('rattle')
quit()
install.packages("DescTools")
install.packages('magick')
install.packages("magick")
install.packages("magick")
exit
quit()
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(0,0,2) %>%
addGraticule()
leaflet() %>%
addTiles() %>%
setView(0,0,2) %>%
addGraticule(interval = 40,
style = list(color = "#FF0000", weight = 1))
leaflet() %>%
addTiles() %>%
setView(0,0,2) %>%
addGraticule(interval = 10,
style = list(color = "#FF0000", weight = 1))
leaflet() %>%
addTiles() %>%
setView(0,0,2) %>%
addGraticule(group = "Graticule") %>%
addLayersControl(overlayGroups = c("Graticule"),
options = layersControlOptions(collapsed = FALSE))
leaflet() %>%
addTiles() %>%
setView(0,0,2) %>%
addGraticule(group = "Graticule",
interval = 10,
style = list(color = "#FF0000", weight = 1)) %>%
addLayersControl(overlayGroups = c("Graticule"),
options = layersControlOptions(collapsed = FALSE))
leaflet() %>%
addTiles() %>%
setView(0,0,2) %>%
addTerminator()
leaflet() %>%
addTiles() %>%
addTerminator()
leaflet() %>%
addTiles() %>%
addTerminator(resolution=10,
time = "2013-06-20T21:00:00Z",
group = "daylight") %>%
addLayersControl(
overlayGroups = "daylight",
options = layersControlOptions(collapsed = FALSE))
leaflet() %>%
addTiles() %>%
addTerminator(resolution=10,
time = "2017-10-02T20:00:00Z",
group = "daylight") %>%
addLayersControl(
overlayGroups = "daylight",
options = layersControlOptions(collapsed = FALSE))
leaflet() %>%
addTiles() %>%
addTerminator(resolution=10,
time = "2017-10-02T10:00:00Z",
group = "daylight") %>%
addLayersControl(
overlayGroups = "daylight",
options = layersControlOptions(collapsed = FALSE))
leaflet() %>%
addTiles() %>%
addTerminator(resolution=10,
time = "2017-10-02T23:00:00Z",
group = "daylight") %>%
addLayersControl(
overlayGroups = "daylight",
options = layersControlOptions(collapsed = FALSE))
leaflet() %>%
addTiles() %>%
addTerminator(resolution=10,
time = "2017-10-02T22:00:00Z",
group = "daylight") %>%
addLayersControl(
overlayGroups = "daylight",
options = layersControlOptions(collapsed = FALSE))
leaflet() %>%
addTiles() %>%
addTerminator(resolution=10,
time = "2017-10-02T21:00:00Z",
group = "daylight") %>%
addLayersControl(
overlayGroups = "daylight",
options = layersControlOptions(collapsed = FALSE))
leaflet() %>%
addTiles() %>%
setView(0,0,3) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(0,0,2) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(0,0,1) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(0,0,2) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(1,0,2) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(10,0,2) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(-70,0,2) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(-75,0,2) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(-75,45,2) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(-75,45,3) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>%
addTiles() %>%
setView(-75,45,4) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
library(htmltools)
library(htmlwidgets)
leaflet() %>%
addTiles() %>%
addEasyButton(easyButton(icon="fa-globe",
title="Zoom to Level 1",
onClick=JS("function(btn, map){ map.setZoom(1); }"))) %>%
addEasyButton(easyButton(icon="fa-crosshairs",
title="Locate Me",
onClick=JS("function(btn, map){ map.locate({setView: true}); }")))
l <- leaflet() %>% setView(0,0,3)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l <- l %>% addProviderTiles(provider, group = provider)
}
l %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
l <- leaflet() %>% setView(-75,45,4)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l <- l %>% addProviderTiles(provider, group = provider)
}
l %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
l <- leaflet() %>% setView(-70,45,4)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l <- l %>% addProviderTiles(provider, group = provider)
}
l %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
l <- leaflet() %>% setView(-70,45,5)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l <- l %>% addProviderTiles(provider, group = provider)
}
l %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
l <- leaflet() %>% setView(-70,45,6)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l <- l %>% addProviderTiles(provider, group = provider)
}
l %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
l <- leaflet() %>% setView(-70,45,7)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l <- l %>% addProviderTiles(provider, group = provider)
}
l %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
library(ggmap)
geocode(c('Cape Fligely, Rudolf Island, Franz Josef Land, Russia',
'Gavdos, Greece',
'Faja Grande, Azores',
'Severny Island, Russia'))
getwd()
setwd("/home/ugo/Documents/Rprojects/rmarkdown/")
library(readxl)
# Read in the data set and assign to the object
work <- read_excel('data/Survival.xls', sheet = 'work')
str(work)
work$largecity <- as.factor(work$largecity)
work <- subset(work, work$hours != 0)
library(readxl)
# Read in the data set and assign to the object
work <- read_excel('data/Survival.xls', sheet = 'work')
str(work)
work$largecity <- as.factor(work$largecity)
work <- subset(work, work$hours != 0)
plot_ly(work, x = ~faminc, y = ~hours, color = ~largecity, size = ~exper)
suppressPackageStartupMessages(library(plotly))
plot_ly(work, x = ~faminc, y = ~hours, color = ~largecity, size = ~exper)
p <- plot_ly(work, x = ~faminc, y = ~hours)
pp <- subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d()
)
pp
budget <- read.csv('data/CanadaFederalBudget.csv', sep = ';', header = TRUE)
b_revenues <- subset(budget, budget$RevExp == 'Revenue outlook')
b_expenses <- subset(budget, budget$RevExp == 'Program expenses outlook')
b_revenues
b_expenses
library(highcharter)
hchart(b_revenues, "treemap", hcaes(x = Details, value = Budget2016, color = Budget2016))
hchart(b_expenses, "treemap", hcaes(x = Details, value = -Budget2016, color = -Budget2016))
colourpicker:::colourPickerAddin()
colourpicker:::plotHelperAddin()
ggedit:::ggeditAddin()
library(ggplot2)
p <- ggplot(mtcars, aes(x = hp, y = wt)) +
geom_point() +
geom_smooth(linetype=2, size=2, colour='#4876FF')
p
p2 <- p
library(ggedit)
p2 <- ggedit(p)
ggedit:::ggeditAddin()
bookdown:::mathquill()
getwd()
USAccDeaths <- read_csv('data/USAccDeaths.csv')
#USAccDeaths$date <- as.POSIXct(USAccDeaths$date)
str(USAccDeaths)
USAccDeaths <- read.csv('data/USAccDeaths.csv')
#USAccDeaths$date <- as.POSIXct(USAccDeaths$date)
str(USAccDeaths)
apple_stock_price <- read.csv('data/apple_stock_price.csv')
#USAccDeaths$Date <- as.POSIXct(USAccDeaths$Date)
str(apple_stock_price)
